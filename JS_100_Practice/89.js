/* 문제89 : 지식이의 게임 개발 2 */
// (연계형 문제 - 88번을 먼저 풀고 오셔야 합니다!)
// 제코베의 도움을 받아 성공적으로 지도를 만들어낸 지식이는 캐릭터의 움직임을 구현했습니다.
// 하지만 지도 위의 캐릭터 위치를 나타내는데 문제가 발생했습니다.
// 지식이는 지도 위에서 캐릭터의 위치를 나타내기 위해 다시 한번 제코베에 도움을 요청합니다.

// 지도 위에서 캐릭터의 위치를 나타내주세요

// 1. 지도는 88번 문제의 해답을 사용해 주세요
// 2. 입력값은 지도, 캐릭터의 움직임입니다.
// 3. 캐릭터의 움직임은 { 상:1, 하:2, 좌:3, 우:4 }로 정수로 이루어진 배열이 들어갑니다.
// 4. 벽과 장애물은 통과할 수 없습니다.
// 5. 마지막 캐릭터의 위치를 반영한 지도를 보여주고 위치를 반환하는 함수를 작성해 주세요.

// 데이터
// 가로 = 4
// 세로 = 5
// 캐릭터위치 = [0, 0]
// 장애물 = [[0,1],[1,1],[2,3],[1,3]]
// console.log('캐릭터 이동 전 지도')
// 지도 = make_map(가로, 세로, 캐릭터위치, 장애물)

// 움직임 = [2,2,2,4,4,4]
// console.log('캐릭터 이동 후 지도')
// 캐릭터 위치 = move(지도, 움직임)

// 출력
// 캐릭터 이동 전 지도
// [2, 2, 2, 2, 2, 2]
// [2, 1, 2, 0, 0, 2]
// [2, 0, 2, 0, 2, 2]
// [2, 0, 0, 0, 2, 2]
// [2, 0, 0, 0, 0, 2]
// [2, 0, 0, 0, 0, 2]
// [2, 2, 2, 2, 2, 2]

// 캐릭터 이동 후 지도
// [2, 2, 2, 2, 2, 2]
// [2, 0, 2, 0, 0, 2]
// [2, 0, 2, 0, 2, 2]
// [2, 0, 0, 0, 2, 2]
// [2, 0, 0, 0, 1, 2]
// [2, 0, 0, 0, 0, 2]
// [2, 2, 2, 2, 2, 2]
// 캐릭터위치 : [4, 4]

// 답

let 가로 = 4;
let 세로 = 5;
let 캐릭터 = [0, 0];
let 장애물 = [
    [0, 1],
    [1, 1],
    [2, 3],
    [1, 3],
];
let 움직임 = [2, 2, 2, 4, 4, 4];
let 지도 = make_map(가로, 세로, 캐릭터, 장애물);
console.log(지도);
console.log("캐릭터 이동 전 지도");

function move(map, move) {
    // 캐릭터 위치 찾기
    let 캐릭 = [];

    for (let i = 0; i < map.length; i++) {
        if (map[i].indexOf(1) !== -1) {
            캐릭 = [i, map[i].indexOf(1)];
        }
    }

    // 캐릭터 이동 전 기존 자리 0 만들기
    map[캐릭[0]][캐릭[1]] = 0;
    console.log(map);

    // 이동 실행
    while (move.length) {
        let 이동 = move.shift();

        switch (이동) {
            case 1:
                if (map[캐릭[0] - 1][캐릭[1]] !== 2) {
                    캐릭[0] -= 1;
                }
                break;
            case 2:
                if (map[캐릭[0] + 1][캐릭[1]] !== 2) {
                    캐릭[0] += 1;
                }
                break;
            case 3:
                if (map[캐릭[0]][캐릭[1] - 1] !== 2) {
                    캐릭[1] -= 1;
                }
                break;
            case 4:
                if (map[캐릭[0]][캐릭[1] + 1] !== 2) {
                    캐릭[1] += 1;
                }
                break;
            default:
                break;
        }
    }

    // 이동 후 캐릭터 다시 그리기
    map[캐릭[0]][캐릭[1]] = 1;

    console.log(map);

    return `캐릭터위치 : ${캐릭}`;
}

console.log(move(지도, 움직임));

// 지도 만들기
function make_map(가로, 세로, 캐릭터, 장애물) {
    const map = [];

    // 장애물을 실제 좌표와 맞춰줌
    for (const 위치 of 장애물) {
        위치[0] += 1;
        위치[1] += 1;
    }

    // 초기 지도 생성
    for (let i = 0; i < 세로 + 2; i++) {
        map.push(new Array(가로 + 2).fill(2));
    }

    // 외벽 제외 0 할당
    // [1,1] -> [5,4]
    for (let i = 1; i < 세로 + 1; i++) {
        for (let j = 1; j < 가로 + 1; j++) {
            map[i][j] = 0;
        }
    }

    // 벽 할당
    장애물.forEach((위치) => {
        map[위치[0]][위치[1]] = 2;
    });

    // 캐릭터 할당
    if (캐릭터[0] < 세로 && 캐릭터[1] < 가로) {
        map[캐릭터[0] + 1][캐릭터[1] + 1] = 1;
    } else return "캐릭터 위치 이상해";

    return map;
}
